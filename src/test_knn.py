"""Test module for k nearest neighbor."""

import pytest

a = [[1.4, 0.2, 5, 3.3], [1.5, 0.2, 5.3, 3.7], [1.4, 0.2, 4.6, 3.2], [4.3, 1.3, 6.2, 2.9], [4, 1.2, 5.8, 2.6], [4.1, 1.3, 5.7, 2.8]]
b = [[1.4, 0.2, 5.1, 3.5, 0], [1.4, 0.2, 4.9, 3, 0], [1.3, 0.2, 4.7, 3.2, 0], [4.7, 1.4, 7, 3.2, 1], [4.5, 1.5, 6.4, 3.2, 1], [4.9, 1.5, 6.9, 3.1, 1]]

flower_train = [[1.4, 0.2, 5.1, 3.5, 0], [1.4, 0.2, 4.9, 3, 0], [1.3, 0.2, 4.7, 3.2, 0], [1.5, 0.2, 4.6, 3.1, 0], [1.4, 0.2, 5, 3.6, 0], [1.7, 0.4, 5.4, 3.9, 0], [1.4, 0.3, 4.6, 3.4, 0], [1.5, 0.2, 5, 3.4, 0], [1.4, 0.2, 4.4, 2.9, 0], [1.5, 0.1, 4.9, 3.1, 0], [1.5, 0.2, 5.4, 3.7, 0], [1.6, 0.2, 4.8, 3.4, 0], [1.4, 0.1, 4.8, 3, 0], [1.1, 0.1, 4.3, 3, 0], [1.2, 0.2, 5.8, 4, 0], [1.5, 0.4, 5.7, 4.4, 0], [1.3, 0.4, 5.4, 3.9, 0], [1.4, 0.3, 5.1, 3.5, 0], [1.7, 0.3, 5.7, 3.8, 0], [1.5, 0.3, 5.1, 3.8, 0], [1.7, 0.2, 5.4, 3.4, 0], [1.5, 0.4, 5.1, 3.7, 0], [1, 0.2, 4.6, 3.6, 0], [1.7, 0.5, 5.1, 3.3, 0], [1.9, 0.2, 4.8, 3.4, 0], [1.6, 0.2, 5, 3, 0], [1.6, 0.4, 5, 3.4, 0], [1.5, 0.2, 5.2, 3.5, 0], [1.4, 0.2, 5.2, 3.4, 0], [1.6, 0.2, 4.7, 3.2, 0], [1.6, 0.2, 4.8, 3.1, 0], [1.5, 0.4, 5.4, 3.4, 0], [1.5, 0.1, 5.2, 4.1, 0], [1.4, 0.2, 5.5, 4.2, 0], [1.5, 0.1, 4.9, 3.1, 0], [1.2, 0.2, 5, 3.2, 0], [1.3, 0.2, 5.5, 3.5, 0], [1.5, 0.1, 4.9, 3.1, 0], [1.3, 0.2, 4.4, 3, 0], [1.5, 0.2, 5.1, 3.4, 0], [4.7, 1.4, 7, 3.2, 1], [4.5, 1.5, 6.4, 3.2, 1], [4.9, 1.5, 6.9, 3.1, 1], [4, 1.3, 5.5, 2.3, 1], [4.6, 1.5, 6.5, 2.8, 1], [4.5, 1.3, 5.7, 2.8, 1], [4.7, 1.6, 6.3, 3.3, 1], [3.3, 1, 4.9, 2.4, 1], [4.6, 1.3, 6.6, 2.9, 1], [3.9, 1.4, 5.2, 2.7, 1], [3.5, 1, 5, 2, 1], [4.2, 1.5, 5.9, 3, 1], [4, 1, 6, 2.2, 1], [4.7, 1.4, 6.1, 2.9, 1], [3.6, 1.3, 5.6, 2.9, 1], [4.4, 1.4, 6.7, 3.1, 1], [4.5, 1.5, 5.6, 3, 1], [4.1, 1, 5.8, 2.7, 1], [4.5, 1.5, 6.2, 2.2, 1], [3.9, 1.1, 5.6, 2.5, 1], [4.8, 1.8, 5.9, 3.2, 1], [4, 1.3, 6.1, 2.8, 1], [4.9, 1.5, 6.3, 2.5, 1], [4.7, 1.2, 6.1, 2.8, 1], [4.3, 1.3, 6.4, 2.9, 1], [4.4, 1.4, 6.6, 3, 1], [4.8, 1.4, 6.8, 2.8, 1], [5, 1.7, 6.7, 3, 1], [4.5, 1.5, 6, 2.9, 1], [3.5, 1, 5.7, 2.6, 1], [3.8, 1.1, 5.5, 2.4, 1], [3.7, 1, 5.5, 2.4, 1], [3.9, 1.2, 5.8, 2.7, 1], [5.1, 1.6, 6, 2.7, 1], [4.5, 1.5, 5.4, 3, 1], [4.5, 1.6, 6, 3.4, 1], [4.7, 1.5, 6.7, 3.1, 1], [4.4, 1.3, 6.3, 2.3, 1], [4.1, 1.3, 5.6, 3, 1], [4, 1.3, 5.5, 2.5, 1]]
flower_predict = [[1.3, 0.3, 5, 3.5], [1.3, 0.3, 4.5, 2.3], [1.3, 0.2, 4.4, 3.2], [1.6, 0.6, 5, 3.5], [1.9, 0.4, 5.1, 3.8], [1.4, 0.3, 4.8, 3], [1.6, 0.2, 5.1, 3.8], [1.4, 0.2, 4.6, 3.2], [1.5, 0.2, 5.3, 3.7], [1.4, 0.2, 5, 3.3], [4.4, 1.2, 5.5, 2.6], [4.6, 1.4, 6.1, 3], [4, 1.2, 5.8, 2.6], [3.3, 1, 5, 2.3], [4.2, 1.3, 5.6, 2.7], [4.2, 1.2, 5.7, 3], [4.2, 1.3, 5.7, 2.9], [4.3, 1.3, 6.2, 2.9], [3, 1.1, 5.1, 2.5], [4.1, 1.3, 5.7, 2.8]]


def test_knn_works():
    """Test knn works with sample flower data."""
    from knn import KNN
    knn = KNN(b)
    assert knn.predict(a) == [0, 0, 0, 1, 1, 1]


def test_80_percent_versus_20_percent_flower_data():
    """Test knn works with the full flower data, 80% for training, 20% for testing."""
    from knn import KNN
    knn = KNN(flower_train)
    assert knn.predict(flower_predict) == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]


def test_knn_works_when_k_equals_4():
    """Test knn works with sample flower data when k = 4."""
    from knn import KNN
    knn = KNN(b, 4)
    assert knn.predict(a) == [0, 0, 0, 1, 1, 1]


def test_knn_gets_value_error_when_k_equals_0():
    """Test knn gets a value error when k = 0."""
    from knn import KNN
    with pytest.raises(ValueError):
        KNN(b, 0)


def test_knn_gets_value_error_when_k_is_greater_than_data():
    """Test knn gets a value error when k is bigger than the training data size."""
    from knn import KNN
    with pytest.raises(ValueError):
        KNN(b, 7)
